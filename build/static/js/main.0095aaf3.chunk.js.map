{"version":3,"sources":["SummaryData.js","Description.js","scard.js","ApiClient.js","App.js","serviceWorker.js","index.js"],"names":["SummaryData","Table","striped","bordered","hover","size","colSpan","this","props","max","min","wind","React","Component","Description","Card","className","Body","Text","text","Scard","day","Date","parseInt","dateString","nameDay","getDay","month","getMonth","date","getDate","image","img","maxTemp","Math","round","minTemp","windSpeed","dataKey","Header","as","Image","src","alt","key","ApiClient","response","status","Promise","resolve","reject","Error","statusText","getRequest","url","axios","get","then","catch","error","console","alert","App","state","loading","weather","apiClient","setState","fetching","getWeather","updateWeather","data","daily","finally","log","slice","map","current","i","Col","lg","CardGroup","dt","icon","description","temp","wind_speed","fetchWeatherData","Container","Navbar","bg","variant","Brand","href","Row","buildCards","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0095aaf3.chunk.js","sourcesContent":["import React from 'react';\n\nimport Table from 'react-bootstrap/Table';\n\nclass SummaryData extends React.Component {\n\n  render() {\n    return (\n      <>\n        <Table striped bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th colSpan=\"2\"><sup>o</sup>C</th>\n              <th>W</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{this.props.max}</td>\n              <td>{this.props.min}</td>\n              <td>{this.props.wind}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n\n}\n\nexport default SummaryData;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\n\nclass Description extends React.Component {\n\n  render() {    \n    return (\n      <>\n        <Card className=\"mx-auto text-center mt-2 border-0\">\n          <Card.Body>\n          <Card.Text>{this.props.text}</Card.Text>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n\n\n}\n\nexport default Description;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Image from 'react-bootstrap/Image';\nimport SummaryData from './SummaryData';\nimport Description from './Description'\n\nclass Scard extends React.Component {\n\n\n  render() {\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n    const day = new Date(parseInt(this.props.dateString) * 1000);\n    const nameDay = days[day.getDay(day)]\n    const month = months[day.getMonth(day)]\n    const date = day.getDate(day)\n    const image = `http://openweathermap.org/img/wn/${this.props.img}@2x.png`\n    const maxTemp = Math.round(this.props.max, 1)\n    const minTemp = Math.round(this.props.min, 1)\n    const windSpeed = Math.round(this.props.wind, 1)\n    const dataKey = this.props.dateString + \"data\"\n\n    return (\n      <>\n          <Card className=\"mx-auto text-center mt-2\">\n            <Card.Header as=\"h5\">{nameDay}{\"-\"}{date}{\"-\"}{month}</Card.Header>\n            <Image className=\"mx-auto\" src={image} alt={this.props.alt} />\n            <Card.Body>\n              <Description text={this.props.text} />\n              <SummaryData key={dataKey} max={maxTemp} min={minTemp} wind={windSpeed} />\n            </Card.Body>\n          </Card>\n      </>\n    );\n  }\n\n\n}\n\nexport default Scard;","import axios from 'axios'\n\nexport class ApiClient {\n\n  status(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return Promise.resolve(response)\n    } else {\n      return Promise.reject(new Error(response.statusText))\n    }\n  }\n\n  getWeather() {\n    return this.getRequest(\"https://api.openweathermap.org/data/2.5/onecall?lat=53.382969&lon=-1.4659&exclude=hourly,minutely&units=metric&appid=06af2c84a95e6a736fd7bab4b3be279d\")\n  }\n\n  getRequest(url) {\n    return axios.get(url)\n      .then(this.status)\n      .catch(function (error) {\n        // handle error\n        console.error(error);\n        alert(error)\n      })\n  }\n\n}","import React from 'react';\nimport Scard from './scard';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Navbar from 'react-bootstrap/Navbar'\nimport CardGroup from 'react-bootstrap/CardGroup';\nimport { ApiClient } from './ApiClient'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: \"\",\n      weather: []\n    }\n    this.apiClient = new ApiClient()\n  }\n\n\n  fetchWeatherData() {\n    this.setState({\n      loading: \"....loading\",\n      fetching: true\n    })\n\n    this.apiClient.getWeather()\n      .then((response) => { this.updateWeather(response.data.daily) })\n      .finally(() => {\n        this.setState({\n          loading: \"\"\n        }, console.log(this.state.weather))\n      })\n  }\n\n  updateWeather(response) {\n    this.setState({\n      weather: response\n    })\n  }\n\n  buildCards() {\n    return this.state.weather.slice(1, 6).map((current, i) => (\n      <Col key={i} lg>\n        <CardGroup>\n          <Scard dateString={current.dt} img={current.weather[0].icon} alt={current.weather[0].description} text={current.weather[0].description} max={current.temp.max} min={current.temp.min} wind={current.wind_speed} />\n        </CardGroup>\n      </Col>\n\n    )\n    )\n  }\n\n  componentDidMount() {\n    this.fetchWeatherData()\n\n  }\n\n  render() {\n    return (\n      <>\n\n        <Container>\n          <Navbar bg=\"primary\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Weather {this.state.loading}</Navbar.Brand>\n          </Navbar>\n          <Row>\n            {this.buildCards()}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}